apply plugin: 'c'
apply plugin: 'visual-studio'

model {
    repositories {
        libs(PrebuiltLibraries) {
            libcrypto {
                headers.srcDir System.getenv().SSL_DIR + "\\include"
                        binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile =
                            file(System.getenv().SSL_DIR + "\\bin\\libeay32.dll")
                            sharedLibraryLinkFile = file(System.getenv().SSL_DIR + "\\lib\\libeay32.lib")
                }
            }
            libssl {
                headers.srcDir System.getenv().SSL_DIR + "\\include"
                        binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile =
                            file(System.getenv().SSL_DIR + "\\bin\\ssleay32.dll")
                            sharedLibraryLinkFile = file(System.getenv().SSL_DIR + "\\lib\\ssleay32.lib")
                }
            }
            if(file(System.getenv().URIPARSER_DIR +"\\lib\\uriparser.lib").exists()) {
                uriparser {
                    headers.srcDir System.getenv().URIPARSER_DIR + "\\include"
                            binaries.withType(StaticLibraryBinary) {
                        staticLibraryFile =
                                file(System.getenv().URIPARSER_DIR + "\\lib\\uriparser.lib")
                    }
                }
            }
            if(file(System.getenv().CURL_DIR +"\\bin\\libcurl.dll").exists()) {
                libcurl {
                    headers.srcDir System.getenv().CURL_DIR + "\\include"
                            binaries.withType(SharedLibraryBinary) {
                            sharedLibraryFile =
                                file(System.getenv().CURL_DIR + "\\bin\\libcurl.dll")
                            sharedLibraryLinkFile = 
                                file(System.getenv().CURL_DIR + "\\lib\\libcurl.lib")
                    }
                }
            } 
        }
    }    

}

model {
    visualStudio {
        projects.all {
            projectFile.location = "vs/${name}.vcxproj"
                    filtersFile.location = "vs/${name}.vcxproj.filters"
        }
        solutions.all {
            solutionFile.location = "vs/${name}.sln"
        }
    }
}

model {
    components {
    
        est(NativeLibrarySpec) {

            flavors {
                release
                debug
            }
            sources {
                c {
                    source {
                        
                        srcDir "safe_c_stub/src"
                        srcDir "src/est"
                        include "*.c"
                    }
                    exportedHeaders {
                        srcDir "src/est"
                        srcDir "safe_c_stub/include"
                        include "*.h"
                    }

                }
            }
            binaries.all {
                if (flavor == flavors.debug){
                    cCompiler.define "DT_EXPORTS" , "1"
                    cCompiler.define "DEVTEST", "1"
                    linker.args "/DEBUG"
                }

                if(file(System.getenv().URIPARSER_DIR +"\\lib\\uriparser.lib").exists())
                {
                    lib library: "uriparser", linkage: "static"
                }

                if(file(System.getenv().CURL_DIR +"\\bin\\libcurl.dll").exists())
                {
                    lib library: "libcurl", linkage: "shared"
                }

                lib library: "libcrypto", linkage: "shared"
                lib library: "libssl", linkage: "shared" 
               
            }
        }
     
    }
}

model {
    binaries {
        all {
            // Define toolchain-specific compiler and linker options
            if (toolChain in Gcc) {
                // Example GCC args
                cCompiler.args "-g", "-O0", "-Wall"
            }
            else if(toolChain in VisualCpp) {

                if(file(System.getenv().URIPARSER_DIR +"\\lib\\uriparser.lib").exists())
                {
                    cCompiler.define "HAVE_URIPARSER", "1"
                }                
                if(file(System.getenv().CURL_DIR +"\\bin\\libcurl.dll").exists())
                {
                    cCompiler.define "HAVE_LIBCURL", "1"
                }                
                cCompiler.define "WIN32"
                cCompiler.define "HAVE_STDINT"
                cCompiler.define "LIBEST_EXPORTS", "1"
                cCompiler.define "DISABLE_BACKTRACE"
                cCompiler.define "__STDC_WANT_SECURE_LIB__" , "0"
                cCompiler.define "PACKAGE_STRING", "\"libest 2.1.0\""               
                cCompiler.define "DISABLE_PTHREADS", "1"
                cCompiler.args "/GS", "/GL", "/analyze-", "/W3", "/Gy", "/Zc:wchar_t", "/Zi", "/Gm-", "/fp:precise", "/errorReport:prompt", "/WX-", "/Zc:forScope", "/Gd", "/Oy-","/Oi","/MD", "/EHsc", "/nologo", "/FS"
                linker.args "/DYNAMICBASE","/SAFESEH", "/LTCG", "/NXCOMPAT"
            }
        }
    }
}
